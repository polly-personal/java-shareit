package ru.practicum.shareit.request.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import ru.practicum.shareit.request.exception.ItemRequestIdNotFoundException;
import ru.practicum.shareit.request.mapper.ItemRequestMapper;
import ru.practicum.shareit.request.model.ItemRequest;
import ru.practicum.shareit.request.dto.ItemRequestDto;
import ru.practicum.shareit.request.repository.ItemRequestRepository;
import ru.practicum.shareit.user.exception.ThisUserAlreadyExistException;
import ru.practicum.shareit.user.repository.UserRepository;

@Slf4j
@RequiredArgsConstructor
@Service
public class ItemRequestServiceImpl implements ItemRequestService {
    private final UserRepository userRepository;
    private final ItemRequestRepository itemRequestRepository;

    @Override
    public ItemRequestDto create(Long userId, ItemRequestDto itemRequestDto) {
        idIsExists(userId);

        ItemRequest itemRequestFromDto = ItemRequestMapper.toItemRequest(itemRequestDto);
        /*itemRequestFromDto.setRequestor(userId);*/

        if (!itemRequestRepository.itemRequestIsExists(itemRequestFromDto)) {
            ItemRequest createdItemRequest = itemRequestRepository.create(itemRequestFromDto);
            log.info("üü© –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–æ–∑–¥–∞–Ω –∑–∞–ø—Ä–æ—Å –≤–µ—â–∏ (ItemRequest): " + itemRequestFromDto);

            return ItemRequestMapper.toRequestDto(createdItemRequest);
        }

        log.info("üü©üüß –∑–∞–ø—Ä–æ—Å –≤–µ—â–∏ (ItemRequest) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ù–ï —Å–æ–∑–¥–∞–Ω: " + itemRequestDto);

        throw new ThisUserAlreadyExistException("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id: " + itemRequestDto.getRequestor() + " —É–∂–µ —Å–æ–∑–¥–∞–ª –∑–∞–ø—Ä–æ—Å —Ç–æ—á–Ω–æ —Ç–∞–∫–æ–π –∂–µ –≤–µ—â–∏");
    }

    @Override
    public void idIsExists(Long id) {
//        if (id != null && !userRepository.idIsExists(id)) {
        if (id != null && !userRepository.existsById(id)) {
            throw new ItemRequestIdNotFoundException("–≤–≤–µ–¥–µ–Ω –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π id –∑–∞–ø—Ä–æ—Å–∞ –≤–µ—â–∏ (ItemRequest): " + id);
        }
    }
}
