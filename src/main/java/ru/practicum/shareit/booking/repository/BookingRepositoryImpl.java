package ru.practicum.shareit.booking.repository;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Repository;
import ru.practicum.shareit.booking.model.Booking;
import ru.practicum.shareit.booking.model.CustomerReview;
import ru.practicum.shareit.booking.constant.Status;
import ru.practicum.shareit.booking.dto.BookingDto;
import ru.practicum.shareit.booking.exception.BookingIdNotFoundException;
import ru.practicum.shareit.booking.mapper.BookingMapper;
import ru.practicum.shareit.user.exception.ThisUserAlreadyExistException;

import java.util.*;

@Slf4j
@RequiredArgsConstructor
@Repository
public class BookingRepositoryImpl implements BookingRepository {
    private final BookingMapper bookingMapper;
    private Map<Long, Booking> bookings;
    private Long id;

    @Override
    public BookingDto create(Booking booking) {
        if (bookings == null) {
            bookings = new HashMap<>();
        }

        if (!bookings.containsValue(booking)) {
            booking.setId(getId());
            booking.setStatus(Status.WAITING);

            Long id = booking.getId();
            bookings.put(id, booking);
            log.info("üü© –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–æ–∑–¥–∞–Ω–∞ –±—Ä–æ–Ω—å (Booking): " + booking);

            return bookingMapper.toBookingDto(booking);
        }

        log.info("üü©üüß –±—Ä–æ–Ω—å (Booking) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ù–ï —Å–æ–∑–¥–∞–Ω–∞: " + booking);
        throw new ThisUserAlreadyExistException("–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id: " + booking.getBooker() + " —É–∂–µ —Å–æ–∑–¥–∞–ª –±—Ä–æ–Ω—å —ç—Ç–æ–π" +
                " –≤–µ—â–∏");
    }

    @Override
    public BookingDto approve(Long bookingId) {
        Booking booking = bookings.get(bookingId);
        booking.setStatus(Status.APPROVED);
        log.info("üü©üü™ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –±—Ä–æ–Ω—å (Booking): " + booking);

        return bookingMapper.toBookingDto(booking);
    }

    @Override
    public BookingDto reject(Long bookingId) {
        Booking booking = bookings.get(bookingId);
        booking.setStatus(Status.REJECTED);
        log.info("üü©üüß –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –±—Ä–æ–Ω—å (Booking): " + booking);

        return bookingMapper.toBookingDto(booking);
    }

    @Override
    public BookingDto cancel(Long bookingId) {
        Booking booking = bookings.get(bookingId);

        booking.setStatus(Status.CANCELED);
        log.info("üü©üü• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –æ—Ç–º–µ–Ω–µ–Ω–∞ (–∏–∑ map –ù–ï —É–¥–∞–ª–µ–Ω–∞) –±—Ä–æ–Ω—å (Booking): " + booking);

        /*bookings.remove(bookingId);*/
        BookingDto bookingDto = bookingMapper.toBookingDto(booking);
        return bookingDto;
    }

    @Override
    public BookingDto getById(Long bookingId) {
        Booking booking = bookings.get(bookingId);
        log.info("üü¶ –≤—ã–¥–∞–Ω–∞ –±—Ä–æ–Ω—å (Booking): " + booking);

        return bookingMapper.toBookingDto(booking);
    }

    @Override
    public BookingDto createCustomerReview(BookingDto bookingDto, CustomerReview customerReview) {
        Booking booking = bookings.get(bookingDto.getId());
        booking.setCustomerReview(customerReview);

        log.info("üü¢ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–æ–∑–¥–∞–Ω –æ—Ç–∑—ã–≤: " + customerReview);

        return bookingMapper.toBookingDto(booking);
    }

    @Override
    public void idIsExists(Long id) {
        if (bookings != null && !bookings.containsKey(id)) {
            throw new BookingIdNotFoundException("–≤–≤–µ–¥–µ–Ω –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π id –±—Ä–æ–Ω–∏ (Booking): " + id);
        }
    }

    private Long getId() {
        if (id == null) {
            id = 0L;
        }
        return ++id;
    }
}
