package ru.practicum.shareit.booking.service;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import ru.practicum.shareit.booking.constant.Status;
import ru.practicum.shareit.booking.dto.BookingDtoOut;
import ru.practicum.shareit.booking.dto.BookingUnsupportedState;
import ru.practicum.shareit.booking.exception.*;
import ru.practicum.shareit.booking.mapper.BookingMapper;
import ru.practicum.shareit.booking.model.Booking;
import ru.practicum.shareit.booking.dto.BookingDtoIn;
import ru.practicum.shareit.booking.repository.BookingRepository;
import ru.practicum.shareit.item.dto.ItemDtoOutForBooking;
import ru.practicum.shareit.item.exception.ItemOwnerIdIsNotLinkedToItemId;
import ru.practicum.shareit.item.mapper.ItemMapper;
import ru.practicum.shareit.item.model.Item;
import ru.practicum.shareit.item.service.ItemService;
import ru.practicum.shareit.user.mapper.UserMapper;
import ru.practicum.shareit.user.service.UserService;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

@Slf4j
@Transactional(readOnly = true)
@RequiredArgsConstructor
@Service
public class BookingServiceImpl implements BookingService {
    private final BookingRepository bookingRepository;
    private final UserService userService;
    private final ItemService itemService;
    private static final Sort sort = Sort.by(Sort.Direction.DESC, "start");

    @Transactional
    @Override
    public BookingDtoOut create(Long bookerId, BookingDtoIn bookingDtoIn) {
        ItemDtoOutForBooking itemDtoOutForBooking = itemService.getByIdForBooking(bookingDtoIn.getItemId());
        Long ownerId = itemDtoOutForBooking.getOwner().getId();

        if (ownerId.equals(bookerId)) {
            throw new BookingBookerIdIsOwnerId("id –±—Ä–æ–Ω–∏—Ä—É—é—â–µ–≥–æ: " + bookerId + " —Ä–∞–≤–Ω–æ id –≤–ª–∞–¥–µ–ª—å—Ü–∞: " + ownerId);
        }

        if (itemDtoOutForBooking.getAvailable().equals(true)) {

            LocalDateTime start = bookingDtoIn.getStart();
            LocalDateTime end = bookingDtoIn.getEnd();

            if (start.isAfter(end) || start.isEqual(end)) {
                throw new BookingIncorrectDates("–∫–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –ù–ï –º–æ–∂–µ—Ç –∏–¥—Ç–∏ —Ä–∞–Ω—å—à–µ, —á–µ–º –Ω–∞—á–∞–ª—å–Ω–∞—è –∏–ª–∏ –±—ã—Ç—å –µ–π —Ä–∞–≤–Ω–∞");
            }

            Booking booking = BookingMapper.toBooking(bookingDtoIn);

            Item item = ItemMapper.toItemDtoOutForBooking(itemDtoOutForBooking);
            booking.setItem(item);
            booking.setBooker(UserMapper.toUser(userService.getById(bookerId)));
            booking.setStatus(Status.WAITING);

            log.info("üü© –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å–æ–∑–¥–∞–Ω–∞ –±—Ä–æ–Ω—å (Booking): " + booking);
            return BookingMapper.toBookingDto(bookingRepository.save(booking));
        }

        log.info("üü©üüß –±—Ä–æ–Ω—å (Booking) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ù–ï —Å–æ–∑–¥–∞–Ω–∞: " + bookingDtoIn);
        throw new BookingNotAvailable("–≤–µ—â—å –ù–ï –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è");
    }

    @Transactional
    @Override
    public BookingDtoOut updateStatus(Long ownerId, Long bookingId, boolean isApproval) {
        Booking updatableBooking = ownerIdIsLinkedBookingId(ownerId, bookingId);
        if (isApproval) {
            if (updatableBooking.getStatus().equals(Status.APPROVED)) {
                throw new BookingStatusAlreadyApproved("—Å—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–∂–µ –æ–¥–æ–±—Ä–µ–Ω: " + updatableBooking);
            }
            updatableBooking.setStatus(Status.APPROVED);
        } else {
            updatableBooking.setStatus(Status.REJECTED);
        }

        Booking approvedBooking = bookingRepository.save(updatableBooking);

        log.info("üü™ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª–µ \"status\": " + updatableBooking);
        return BookingMapper.toBookingDto(approvedBooking);
    }

    @Override
    public BookingDtoOut getById(Long bookingId) {
        Booking issuedBooking =
                bookingRepository.findById(bookingId).orElseThrow(() -> new BookingIdNotFound("–≤–≤–µ–¥–µ–Ω " +
                        "–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π id " +
                        "–±—Ä–æ–Ω–∏: " + bookingId));

        log.info("üü¶ –≤—ã–¥–∞–Ω–∞ –±—Ä–æ–Ω—å: " + issuedBooking);
        return BookingMapper.toBookingDto(issuedBooking);
    }

    @Override
    public BookingDtoOut getByIdAndRequestorId(Long requestorId, Long bookingId) {
        Booking issuedBooking = requestorIdIsLinkedBookingId(requestorId, bookingId);

        log.info("üü¶ –≤—ã–¥–∞–Ω–∞ –±—Ä–æ–Ω—å –ø–æ id –∏ RequestorId: " + issuedBooking);
        return BookingMapper.toBookingDto(issuedBooking);
    }

    @Override
    public List<BookingDtoOut> getAllByBookerId(Long bookerId, String state) {
        List<Booking> bookings = new ArrayList<>();

        switch (state) {
            case "ALL":
                bookings = bookingRepository.findAllByBookerId(bookerId, sort);
                break;
            case "CURRENT":
                bookings = bookingRepository.findAllByBookerIdAndStartBeforeAndEndAfter(bookerId, LocalDateTime.now(), LocalDateTime.now(), sort);
                break;
            case "PAST":
                bookings = bookingRepository.findAllByBookerIdAndEndBefore(bookerId, LocalDateTime.now(), sort);
                break;
            case "FUTURE":
                bookings = bookingRepository.findAllByBookerIdAndStartAfter(bookerId, LocalDateTime.now(), sort);
                break;
            case "WAITING":
                bookings = bookingRepository.findAllByBookerIdAndStatusEquals(bookerId, Status.WAITING,
                        sort);
                break;
            case "REJECTED":
                bookings = bookingRepository.findAllByBookerIdAndStatusEquals(bookerId, Status.REJECTED,
                        sort);
                break;
            default:
                throw new BookingUnsupportedState("Unknown state: UNSUPPORTED_STATUS");
        }

        log.info("üü¶ –≤—ã–¥–∞–Ω —Å–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: " + bookings);
        return BookingMapper.toBookingsDto(bookings);
    }

    @Override
    public List<BookingDtoOut> getAllByOwnerId(Long ownerId, String state) {
        List<Booking> bookings = new ArrayList<>();

        switch (state) {
            case "ALL":
                bookings = bookingRepository.findAllByItemOwnerId(ownerId, sort);
                break;
            case "CURRENT":
                bookings = bookingRepository.findAllByItemOwnerIdAndStartBeforeAndEndAfter(ownerId, LocalDateTime.now(), LocalDateTime.now(), sort);
                break;
            case "PAST":
                bookings = bookingRepository.findAllByItemOwnerIdAndEndBefore(ownerId, LocalDateTime.now(), sort);
                break;
            case "FUTURE":
                bookings = bookingRepository.findAllByItemOwnerIdAndStartAfter(ownerId, LocalDateTime.now(), sort);
                break;
            case "WAITING":
                bookings = bookingRepository.findAllByItemOwnerIdAndStatusEquals(ownerId, Status.WAITING,
                        sort);
                break;
            case "REJECTED":
                bookings = bookingRepository.findAllByItemOwnerIdAndStatusEquals(ownerId, Status.REJECTED,
                        sort);
                break;
            default:
                throw new BookingUnsupportedState("Unknown state: UNSUPPORTED_STATUS");
        }

        log.info("üü¶ –≤—ã–¥–∞–Ω —Å–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: " + bookings);
        return BookingMapper.toBookingsDto(bookings);
    }

    private Booking ownerIdIsLinkedBookingId(Long ownerId, Long bookingId) {
        userService.idIsExists(ownerId);

        Booking issuedBooking = bookingRepository.findById(bookingId).orElseThrow(() -> new BookingIdNotFound("–≤–≤–µ–¥–µ–Ω " +
                "–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π id " +
                "–±—Ä–æ–Ω–∏: " + bookingId));

        Item item = issuedBooking.getItem();
        Long itemId = item.getId();

        if (!ownerId.equals(item.getOwner().getId())) {
            throw new ItemOwnerIdIsNotLinkedToItemId("id –≤–µ—â–∏: " + itemId + " –Ω–µ —Å–≤—è–∑–∞–Ω —Å id –≤–ª–∞–¥–µ–ª—å—Ü–∞: " + ownerId);
        }

        return issuedBooking;
    }

    private Booking requestorIdIsLinkedBookingId(Long requestorId, Long bookingId) {
        userService.idIsExists(requestorId);

        Booking issuedBooking = bookingRepository.findById(bookingId).orElseThrow(() -> new BookingIdNotFound("–≤–≤–µ–¥–µ–Ω " +
                "–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π id " +
                "–±—Ä–æ–Ω–∏: " + bookingId));

        Long bookerId = issuedBooking.getBooker().getId();
        Long ownerId = issuedBooking.getItem().getOwner().getId();

        if (!requestorId.equals(bookerId) && !requestorId.equals(ownerId)) {
            throw new BookingRequestorIdNotLinkedToBookerIdOrOwnerId("id –∑–∞–ø—Ä–∞—à–∏–≤–∞—é—â–µ–≥–æ: " + requestorId + " –Ω–µ —Å–≤—è–∑–∞–Ω —Å id –∞—Ä–µ–Ω–¥—É—é—â–µ–≥–æ –∏–ª–∏ id –≤–ª–∞–¥–µ–ª—å—Ü–∞: " + bookerId);
        }

        return issuedBooking;
    }
}
